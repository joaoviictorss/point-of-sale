// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String?
  imageUrl String?

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userOAuthAccount userOAuthAccount[]
  orders           Order[]

  memberOf           Member[]
  ownedOrganizations Organization[]
}

enum Role {
  ADMIN
  EMPLOYEE
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  members  Member[]
  products Product[]
  orders   Order[]
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(EMPLOYEE)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([organizationId, userId])
}

enum OAuthProvider {
  GOOGLE
}

model userOAuthAccount {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  provider          OAuthProvider
  providerAccountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, provider, providerAccountId])
  @@unique([providerAccountId])
  @@unique([provider, providerAccountId])
  @@index([provider, providerAccountId])
}

model resetPasswordToken {
  id        String    @id @default(uuid())
  email     String
  expiresAt DateTime
  used      Boolean   @default(false)
  usedAt    DateTime?
  ipAddress String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
}

model Order {
  id            String        @id @default(uuid())
  totalAmount   Int
  discount      Int           @default(0)
  tax           Int           @default(0)
  finalAmount   Int
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod
  notes         String?

  employeeId String
  employee   User        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  items      OrderItem[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id         String @id @default(uuid())
  quantity   Float
  unitPrice  Int
  discount   Int    @default(0)
  totalPrice Int

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

enum ProductType {
  UNIT
  WEIGHT
  VOLUME
}

enum StockUnit {
  UNITS
  GRAMS
  KILOGRAMS
  LITERS
  MILLILITERS
}

model Product {
  id          String      @id @default(uuid())
  name        String
  costPrice   Int         @default(0)
  salePrice   Int         @default(0)
  imageUrl    String?
  category    String?
  productType ProductType @default(UNIT)
  stock       Float       @default(0)
  stockUnit   StockUnit   @default(UNITS)
  minStock    Float?
  maxStock    Float?

  organizationSlug String
  organization     Organization @relation(fields: [organizationSlug], references: [slug], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
